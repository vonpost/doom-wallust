;;; doom-wallust.el --- Doom theme generator powered by Wallust -*- lexical-binding: t; -*-
;; Author: vonpost
;; URL: https://github.com/dcol/doom-wallust
;; Keywords: faces theme tools
;; Package-Requires: ((emacs "27.1"))

;;; Commentary:
;;
;; This library bridges Wallust's palette template with Doom Emacs.  It expects a
;; Wallust template to emit an Emacs Lisp file (see templates/doom-wallust-colors.el)
;; that binds `doom-wallust-generated-palette' to a plist/alist of hex colors.
;; Loading that file (manually or via `doom-wallust-apply') refreshes the
;; `doom-wallust' theme so the rest of your Doom configuration can keep
;; referring to `doom-theme' like usual.  A file watcher is provided to keep the
;; palette in sync while Wallust runs in the background.
;;
;;; Code:

(require 'color)
(require 'cl-lib)
(require 'filenotify)

(defgroup doom-wallust nil
  "Generate Doom themes from Wallust palettes."
  :group 'faces)

(defcustom doom-wallust-palette-file "~/.cache/wallust/doom-wallust-colors.el"
  "Palette file generated by the Wallust template.
The template bundled with this repository writes the palette as Emacs Lisp so
it can be loaded directly."
  :type 'file)

(defcustom doom-wallust-disable-other-themes t
  "Disable any other enabled themes before activating `doom-wallust'."
  :type 'boolean)

(defcustom doom-wallust-after-apply-hook nil
  "Hook run after a palette has been applied."
  :type 'hook)

(defcustom doom-wallust-watch-debounce 0.3
  "Idle seconds to wait before rebuilding the theme after a file change."
  :type 'number)

(defvar doom-wallust--current-palette nil
  "Last palette applied to the `doom-wallust' theme.")

(defvar doom-wallust--watch-descriptor nil
  "Handle returned by `file-notify-add-watch'.")

(defvar doom-wallust--watch-path nil
  "Path currently being watched for palette changes.")

(defvar doom-wallust--watch-timer nil
  "Idle timer used to debounce `doom-wallust' reloads.")

(defvar doom-wallust-generated-palette nil
  "Internal variable populated by the generated Wallust palette file.")

(defconst doom-wallust--required-keys
  '(background foreground cursor
               color0 color1 color2 color3 color4 color5 color6 color7
               color8 color9 color10 color11 color12 color13 color14 color15
               bg-alt fg-alt base0 base1 base2 base3 base4 base5 base6 base7 base8
               selection line comment doc)
  "Palette keys expected from the Wallust template output.")

(deftheme doom-wallust
  "A Doom theme generated from Wallust colors.")

(defun doom-wallust--palette-path (&optional file)
  "Return an expanded palette path using FILE or `doom-wallust-palette-file'."
  (expand-file-name (or file doom-wallust-palette-file)))

(defun doom-wallust--valid-hex-p (value)
  "Return non-nil when VALUE looks like a hex color (#rrggbb or #rgb)."
  (and (stringp value)
       (string-match-p "^#\\([0-9a-fA-F]\\{3\\}\\|[0-9a-fA-F]\\{6\\}\\)$" value)))

(defun doom-wallust--normalize-color (value)
  "Return VALUE downcased if it looks like a hex color, otherwise nil."
  (when (doom-wallust--valid-hex-p value)
    (downcase value)))

(defun doom-wallust--normalize-palette (palette source)
  "Normalize PALETTE (alist/plist) and annotate it with SOURCE path."
  (let ((lookup (lambda (key)
                  (or (alist-get key palette)
                      (plist-get palette key)))))
    (cons (cons 'file source)
          (mapcar (lambda (key)
                    (cons key
                          (doom-wallust--normalize-color
                           (funcall lookup key))))
                  doom-wallust--required-keys))))

(defun doom-wallust--load-palette (&optional file)
  "Load and normalize the Wallust palette from FILE."
  (let* ((path (doom-wallust--palette-path file)))
    (unless (file-readable-p path)
      (user-error "doom-wallust: %s is not readable" path))
    (let (doom-wallust-generated-palette)
      (load path nil 'nomessage)
      (unless doom-wallust-generated-palette
        (user-error "doom-wallust: %s did not set `doom-wallust-generated-palette'" path))
      (doom-wallust--normalize-palette doom-wallust-generated-palette path))))

(defun doom-wallust--palette-color (palette key &optional fallback)
  "Fetch KEY from PALETTE or FALLBACK."
  (or (alist-get key palette)
      fallback))

(defun doom-wallust--require-color (palette key &optional fallback)
  "Fetch KEY from PALETTE or FALLBACK, signaling an error when unavailable."
  (or (doom-wallust--palette-color palette key fallback)
      (user-error "doom-wallust: palette is missing %s" key)))

(defun doom-wallust--blend (c1 c2 alpha)
  "Blend C1 toward C2 using ALPHA (0-1)."
  (let ((rgb1 (color-name-to-rgb c1))
        (rgb2 (color-name-to-rgb c2)))
    (apply #'color-rgb-to-hex
           (cl-mapcar (lambda (x y) (+ (* alpha x) (* (- 1 alpha) y)))
                      rgb1 rgb2))))

(defun doom-wallust--apply-theme (palette)
  "Apply PALETTE to the `doom-wallust' theme."
  (let* ((bg (doom-wallust--require-color palette 'background))
         (fg (doom-wallust--require-color palette 'foreground))
         (cursor (doom-wallust--palette-color palette 'cursor fg))
         (black (doom-wallust--require-color palette 'color0))
         (red (doom-wallust--require-color palette 'color1))
         (green (doom-wallust--require-color palette 'color2))
         (yellow (doom-wallust--require-color palette 'color3))
         (blue (doom-wallust--require-color palette 'color4))
         (magenta (doom-wallust--require-color palette 'color5))
         (cyan (doom-wallust--require-color palette 'color6))
         (white (doom-wallust--require-color palette 'color7))
         ;; (bright-black (doom-lighten black 0.5))
         ;; (bright-red (doom-lighten red 0.5))
         ;; (bright-green (doom-lighten green 0.5))
         (bright-yellow (doom-lighten yellow 0.5))
         (bright-blue (doom-lighten blue 0.5))
         (bright-magenta (doom-lighten magenta 0.5))
         (bright-cyan (doom-lighten cyan 0.5))
         (bg-alt (doom-wallust--require-color palette 'bg-alt))
         (fg-alt (doom-wallust--require-color palette 'fg-alt))
         (base0 (doom-wallust--require-color palette 'base0))
         (base1 (doom-wallust--require-color palette 'base1))
         (base2 (doom-wallust--require-color palette 'base2))
         (base3 (doom-wallust--require-color palette 'base3))
         (base4 (doom-wallust--require-color palette 'base4))
         (base5 (doom-wallust--require-color palette 'base5))
         (base6 (doom-wallust--require-color palette 'base6))
         (base7 (doom-wallust--require-color palette 'base7))
         (base8 (doom-wallust--require-color palette 'base8))
         (selection (doom-wallust--require-color palette 'color8))
         (line (doom-wallust--require-color palette 'base2))
         (comment (doom-wallust--require-color palette 'color10))
         (doc (doom-wallust--require-color palette 'color11))
         (teal (doom-wallust--require-color palette 'color14))
         (orange (doom-lighten red 0.2))
         (dark-blue (doom-darken blue 0.2))
         (violet (doom-wallust--require-color palette 'color12))
         (dark-cyan (doom-darken cyan 0.2))
         (grey base4)
         (comments comment)
         (doc-comments (doom-lighten doc 0.15))
         (modeline-fg fg)
         (modeline-fg-alt base7)
         (modeline-bg line)
         (modeline-bg-inactive (doom-darken bg 0.2))
         (modeline-bg-l (doom-darken bg 0.1))
         (modeline-bg-inactive-l (doom-darken bg-alt 0.1)))
    (custom-theme-set-faces
     'doom-wallust
     `(default ((t (:background ,bg :foreground , fg))))
     `(cursor ((t (:background ,cursor))))
     `(fringe ((t (:background ,bg))))
     `(region ((t (:background ,selection :distant-foreground ,fg))))
     `(highlight ((t (:background ,base1))))
     `(shadow ((t (:foreground ,comments))))
     `(minibuffer-prompt ((t (:foreground ,blue :weight bold))))
     `(vertical-border ((t (:foreground ,base0))))
     `(link ((t (:foreground ,blue :underline t))))
     `(mode-line ((t (:background ,modeline-bg :foreground ,modeline-fg))))
     `(mode-line-inactive ((t (:background ,modeline-bg-inactive :foreground ,modeline-fg-alt))))
     `(header-line ((t (:background ,bg-alt :foreground ,fg))))
     `(solaire-mode-line-face ((t (:inherit mode-line :background ,modeline-bg-l))))
     `(solaire-mode-line-inactive-face ((t (:inherit mode-line-inactive :background ,modeline-bg-inactive-l))))
     `(font-lock-builtin-face ((t (:foreground ,magenta))))
     `(font-lock-comment-face ((t (:foreground ,fg-alt))))
     `(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face))))
     `(font-lock-constant-face ((t (:foreground ,cyan))))
     `(font-lock-doc-face ((t (:foreground ,doc-comments :slant italic))))
     `(font-lock-function-name-face ((t (:foreground ,blue))))
     `(font-lock-keyword-face ((t (:foreground ,red :weight semi-bold))))
     `(font-lock-string-face ((t (:foreground , teal))))
     `(font-lock-type-face ((t (:foreground ,cyan))))
     `(font-lock-variable-name-face ((t (:foreground ,violet))))
     `(font-lock-warning-face ((t (:foreground ,bright-yellow :weight bold))))
     `(success ((t (:foreground ,green :weight bold))))
     `(warning ((t (:foreground ,yellow :weight bold))))
     `(error ((t (:foreground ,red :weight bold))))
     `(show-paren-match ((t (:background ,bright-blue :foreground ,bg :weight bold))))
     `(line-number ((t (:foreground ,comment :background ,bg))))
     `(line-number-current-line ((t (:foreground ,blue :background ,bg :weight bold))))
     `(org-level-1 ((t (:foreground ,blue :weight semi-bold :height 1.1))))
     `(org-level-2 ((t (:foreground ,magenta :weight semi-bold))))
     `(org-level-3 ((t (:foreground ,yellow :weight semi-bold))))
     `(org-code ((t (:foreground ,cyan))))
     `(org-block ((t (:background ,base0 :extend t))))
     `(org-block-begin-line ((t (:background ,base1 :foreground ,comment :extend t))))
     `(org-block-end-line ((t (:inherit org-block-begin-line))))
     `(org-hide ((t (:foreground ,bg))))
     `(solaire-org-hide-face ((t (:foreground ,bg-alt))))
     `(markdown-code-face ((t (:inherit org-code))))
     `(markdown-header-face ((t (:inherit bold :foreground ,red))))
     `(isearch ((t (:background ,bright-yellow :foreground ,bg :weight bold))))
     `(lazy-highlight ((t (:background ,bright-blue :foreground ,bg))))
     `(compilation-info ((t (:foreground ,green :weight bold))))
     `(compilation-warning ((t (:foreground ,yellow :weight bold))))
     `(pulse-highlight-face ((t (:background ,bright-blue :foreground ,bg))))
     `(pulse-highlight-start-face ((t (:inherit pulse-highlight-face))))
     `(widget-field ((t (:background ,bg-alt :box (:line-width 1 :color ,line)))))
     `(company-tooltip ((t (:background ,bg-alt :foreground ,fg))))
     `(company-tooltip-selection ((t (:background ,selection :foreground ,fg))))
     `(company-scrollbar-bg ((t (:background ,bg-alt))))
     `(company-scrollbar-fg ((t (:background ,line))))
     `(company-tooltip-annotation ((t (:foreground ,comment))))
     `(which-func ((t (:foreground ,bright-magenta :weight bold))))
     `(which-key-key-face ((t (:foreground ,blue :weight bold))))
     `(which-key-separator-face ((t (:foreground ,comment))))
     `(which-key-note-face ((t (:foreground ,yellow))))
     `(which-key-command-description-face ((t (:foreground ,fg))))
     `(which-key-group-description-face ((t (:foreground ,magenta :weight bold))))
     `(anzu-mode-line ((t (:foreground ,bright-cyan :weight bold))))
     `(ivy-current-match ((t (:background ,selection :distant-foreground ,fg))))
     `(ivy-minibuffer-match-face-1 ((t (:background ,bg-alt :foreground ,comment))))
     `(ivy-minibuffer-match-face-2 ((t (:background ,bg-alt :foreground ,bright-blue :weight bold))))
     `(swiper-match-face-1 ((t (:inherit ivy-minibuffer-match-face-1))))
     `(swiper-match-face-2 ((t (:inherit ivy-minibuffer-match-face-2))))
     `(magit-section-heading ((t (:foreground ,yellow :weight bold))))
     `(magit-branch-local ((t (:foreground ,cyan :weight bold))))
     `(magit-branch-remote ((t (:foreground ,green :weight bold))))
     `(magit-diff-added ((t (:background ,(doom-wallust--blend green bg 0.92) :foreground ,green :extend t))))
     `(magit-diff-removed ((t (:background ,(doom-wallust--blend red bg 0.92) :foreground ,red :extend t))))
     `(magit-diff-context ((t (:background ,bg :foreground ,fg))))
     `(magit-diff-context-highlight ((t (:background ,bg-alt :foreground ,fg))))
     `(diff-added ((t (:inherit magit-diff-added))))
     `(diff-removed ((t (:inherit magit-diff-removed))))
     `(diff-refine-added ((t (:background ,(doom-wallust--blend green bg 0.85) :foreground ,bg :weight bold :extend t))))
     `(diff-refine-removed ((t (:background ,(doom-wallust--blend red bg 0.85) :foreground ,bg :weight bold :extend t))))
     `(term-color-black ((t (:foreground ,black :background ,black))))
     `(term-color-red ((t (:foreground ,red :background ,red))))
     `(term-color-green ((t (:foreground ,green :background ,green))))
     `(term-color-yellow ((t (:foreground ,yellow :background ,yellow))))
     `(term-color-blue ((t (:foreground ,blue :background ,blue))))
     `(term-color-magenta ((t (:foreground ,magenta :background ,magenta))))
     `(term-color-cyan ((t (:foreground ,cyan :background ,cyan))))
     `(term-color-white ((t (:foreground ,white :background ,white))))
     `(ansi-color-black ((t (:foreground ,black))))
     `(ansi-color-red ((t (:foreground ,red))))
     `(ansi-color-green ((t (:foreground ,green))))
     `(ansi-color-yellow ((t (:foreground ,yellow))))
     `(ansi-color-blue ((t (:foreground ,blue))))
     `(ansi-color-magenta ((t (:foreground ,magenta))))
     `(ansi-color-cyan ((t (:foreground ,cyan))))
     `(ansi-color-white ((t (:foreground ,white))))
     `(doom-modeline-bar ((t (:background , blue)))))
     `(doom-modeline-buffer-path ((t (:foreground , blue :weight bold))))
     `(doom-modeline-buffer-project-root ((t (:foreground ,teal :weight bold))))
     `(whitespace-empty ((t (:background ,base2))))
     `(css-proprietary-property ((t (:foreground ,orange))))
     `(css-property ((t (:foreground ,green))))
     `(css-selector ((t (:foreground ,blue))))
     `(org-link ((t (:foreground ,blue :underline t))))
     `(org-date ((t (:foreground ,teal :underline nil))))
    (custom-theme-set-variables
     'doom-wallust
     `(ansi-color-names-vector [,black ,red ,green ,yellow ,blue ,magenta ,cyan ,white])
     `(ansi-term-color-vector [unspecified ,black ,red ,green ,yellow ,blue ,magenta ,cyan ,white]))))

(defun doom-wallust--maybe-disable-theme ()
  "Disable other themes when `doom-wallust-disable-other-themes' is non-nil."
  (when doom-wallust-disable-other-themes
    (dolist (theme custom-enabled-themes)
      (unless (eq theme 'doom-wallust)
        (disable-theme theme)))))

;;;###autoload
(defun doom-wallust-apply (&optional file quiet)
  "Load palette FILE (defaults to `doom-wallust-palette-file') and rebuild `doom-wallust'.
With prefix, prompt for FILE.  When QUIET is non-nil suppress status messages."
  (interactive
   (list (when current-prefix-arg
           (read-file-name "Wallust palette file: "
                           nil doom-wallust-palette-file nil nil))
         nil))
  (let* ((palette (doom-wallust--load-palette file))
         (source (alist-get 'file palette)))
    (setq doom-wallust--current-palette palette)
    (doom-wallust--apply-theme palette)
    (doom-wallust--maybe-disable-theme)
    (enable-theme 'doom-wallust)
    (run-hooks 'doom-wallust-after-apply-hook)
    (unless quiet
      (message "doom-wallust: applied %s" source))))

(defun doom-wallust--watch-callback (_event)
  "Internal notify callback that debounces `doom-wallust-apply'."
  (when doom-wallust--watch-timer
    (cancel-timer doom-wallust--watch-timer))
  (setq doom-wallust--watch-timer
        (run-with-idle-timer
         doom-wallust-watch-debounce nil
         (lambda ()
           (setq doom-wallust--watch-timer nil)
           (doom-wallust-apply doom-wallust--watch-path t)))))

;;;###autoload
(defun doom-wallust-start-watching (&optional file)
  "Watch FILE (or `doom-wallust-palette-file') and reload on change."
  (interactive
   (list (when current-prefix-arg
           (read-file-name "Watch palette file: "
                           nil doom-wallust-palette-file nil nil))))
  (doom-wallust-stop-watching)
  (let ((path (doom-wallust--palette-path file)))
    (unless (file-readable-p path)
      (user-error "doom-wallust: %s is not readable" path))
    (setq doom-wallust--watch-path path
          doom-wallust--watch-descriptor
          (file-notify-add-watch path '(change attribute-change)
                                 #'doom-wallust--watch-callback))
    (message "doom-wallust: watching %s" path)))

;;;###autoload
(defun doom-wallust-stop-watching ()
  "Stop watching the Wallust palette file."
  (interactive)
  (when doom-wallust--watch-timer
    (cancel-timer doom-wallust--watch-timer)
    (setq doom-wallust--watch-timer nil))
  (when (and doom-wallust--watch-descriptor (featurep 'filenotify))
    (file-notify-rm-watch doom-wallust--watch-descriptor)
    (setq doom-wallust--watch-descriptor nil
          doom-wallust--watch-path nil)
    (message "doom-wallust: stopped watching")))

(provide-theme 'doom-wallust)
(provide 'doom-wallust)

;;; doom-wallust.el ends here
